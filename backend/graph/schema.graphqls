# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Query {
  customer: [customer!]!
  car: [car!]!
  ticket: [ticket!]!
  shop: [shop!]!
  service: [service!]!

  shopService: [shopService!]!
  activeTicket: [activeTicket!]!
  ticketService: [ticketService!]!
}

type Mutation {
  dropTable: Boolean!
  createTable: Boolean!

  customerCreate(input: customerCreateInput!): customer!
  customerUpdateMulti(input: customerUpdateInput!): [customer!]
  customerDelete(input: DeleteIDInput!): customer!
  customerDeleteAll: [customer!]

  carCreate(input: carCreateInput!): car!
  ticketCreate(input: ticketCreateInput!): ticket!
  shopCreate(input: shopCreateInput!): shop!
  serviceCreate(input: serviceCreateInput!): service!

  shopServiceCreate(input: shopServiceCreateInput!): shopService!
  activeTicketCreate(input: activeTicketCreateInput!): activeTicket!
  ticketServiceCreate(input: ticketServiceCreateInput!): ticketService!
}

input DeleteIDInput {
  ID: ID!
}

type customer {
  ID: ID! 
  fName: String!
  lName: String!
  tel: String!
  email: String!
}

input customerCreateInput {
  ID: ID
  fName: String!
  lName: String!
  tel: String!
  email: String!
}

input customerUpdateInput {
  ID: ID!
  fName: String!
  lName: String!
  tel: String!
  email: String!
}

type car {
  ID: ID!
  ownerID: ID!
  plateNum: String!
  plateType: String!
  issuedAt: String!
  color: String!
  type: String!
  brand: String!
  build: String!
}

input carCreateInput {
  ID: ID
  ownerID: ID!
  plateNum: String!
  plateType: String!
  issuedAt: String!
  color: String!
  type: String!
  brand: String!
  build: String!
}

type ticket {
  ID: ID!
  customerID: ID!
  carID: ID!
  problem: String!
  createTime: String!
  shopID: ID!
  acceptedTime: String!
  status: String!
}

input ticketCreateInput {
  ID: ID
  customerID: ID!
  carID: ID!
  problem: String!
  createTime: String!
  shopID: ID!
  acceptedTime: String!
  status: String!
}

type shop {
  ID: ID!
  name: String!
  tel: String!
  email: String!
  address: String!
}

input shopCreateInput {
  ID: ID
  name: String!
  tel: String!
  email: String!
  address: String!
}

type service {
  ID: ID!
  name: String!
}

input serviceCreateInput {
  ID: ID
  name: String!
}

type shopService {
  shopID: ID!
  serviceID: ID!
}

input shopServiceCreateInput {
  shopID: ID!
  serviceID: ID!
}

type activeTicket {
  ID: ID!
  carID: ID!
  customerID: ID!
  problem: String!
  shopID: ID!
  status: String!
}

input activeTicketCreateInput {
  ID: ID
  carID: ID!
  customerID: ID!
  problem: String!
  shopID: ID!
  status: String!
}

type ticketService {
  ticketID: ID!
  serviceID: ID!
}

input ticketServiceCreateInput {
  ticketID: ID!
  serviceID: ID!
}
